# -*- coding: utf-8 -*-
"""Assignment_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19QvInf-08125A96VqGJ9U-yBN_wOO6ac
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import sklearn

import matplotlib.pyplot as plt
# %matplotlib inline


from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""#Data preprocessing"""

flight_delay_df = pd.read_csv('flight_delay.csv')

flight_delay_df.describe()
errors = {}

"""The maximum value of Delay is 1436 min, mean is 10 min. It shows, that very big delays are outliers."""

flight_delay_df["Scheduled depature time"] = pd.to_datetime(flight_delay_df["Scheduled depature time"])
flight_delay_df["Scheduled arrival time"] = pd.to_datetime(flight_delay_df["Scheduled arrival time"])

"""The format of "Scheduled departure time" and "Scheduled arrival time" are changed from string to datetime"""

flight_delay_df["Duration of flight"] = flight_delay_df["Scheduled arrival time"] - flight_delay_df["Scheduled depature time"]
flight_delay_df["Duration of flight"] = flight_delay_df["Duration of flight"].dt.total_seconds()/60

"""Duration of rhe flight is calculated and added to the current data frame. """

flight_delay_df["Year of departure"] = flight_delay_df["Scheduled depature time"].dt.strftime("%Y")
flight_delay_df["Month of departure"] = flight_delay_df["Scheduled depature time"].dt.strftime("%m")
flight_delay_df["Day of departure"] = flight_delay_df["Scheduled depature time"].dt.strftime("%d")
flight_delay_df["Day of the week of departure"] = flight_delay_df["Scheduled depature time"].dt.strftime("%a")
flight_delay_df["Hour of departure"] = flight_delay_df["Scheduled depature time"].dt.hour
flight_delay_df["Minute of departure"] = flight_delay_df["Scheduled depature time"].dt.minute

flight_delay_df["Year of arrival"] = flight_delay_df["Scheduled arrival time"].dt.strftime("%Y")
flight_delay_df["Month of arrival"] = flight_delay_df["Scheduled arrival time"].dt.strftime("%m")
flight_delay_df["Day of arrival"] = flight_delay_df["Scheduled arrival time"].dt.strftime("%d")
flight_delay_df["Day of the week of arrival"] = flight_delay_df["Scheduled arrival time"].dt.strftime("%a")
flight_delay_df["Hour of arrival"] = flight_delay_df["Scheduled arrival time"].dt.hour
flight_delay_df["Minute of arrival"] = flight_delay_df["Scheduled arrival time"].dt.minute

"""Now, we extract features from date: Month, Year, Day tc"""

del flight_delay_df["Scheduled depature time"]

del flight_delay_df["Scheduled arrival time"]

"""Useless columns are deleted, because this information is presented in new features from previous step"""

from sklearn import preprocessing

le = preprocessing.LabelEncoder()
flight_delay_df["Depature Airport"] = le.fit_transform(flight_delay_df["Depature Airport"])
flight_delay_df["Destination Airport"] = le.fit_transform(flight_delay_df["Destination Airport"])
flight_delay_df["Day of the week of departure"] = le.fit_transform(flight_delay_df["Day of the week of departure"])
flight_delay_df["Day of the week of arrival"] = le.fit_transform(flight_delay_df["Day of the week of arrival"])

"""All categorical features are encoded with Labelencoder. Later, we will show, that they have small weights.

"""

y = flight_delay_df["Delay"]
X = flight_delay_df.drop("Delay", axis = 1)

from sklearn.decomposition import PCA

pca = PCA(n_components=1)
x_PCA = pca.fit_transform(X)

print(pca.mean_)
print(pca.components_)
print(pca.explained_variance_)
print(pca.explained_variance_ratio_)

"""We need to choose feature to visualise data. So we use PCA with 1 component"""

plt.plot(x_PCA, y,'bo')
plt.title('Delay vs PCA vector, min')
plt.xlabel('PCA, min')
plt.ylabel('Delay')
plt.show()

plt.plot(X['Duration of flight'],y,'bo')
plt.title('Delay vs Duration of the flight, min')
plt.xlabel('Duration of the flight, min')
plt.ylabel('Delay')
plt.show()

"""We can see that PCA give us Duration vector as most important for research. We will use it in the models that requires only one feature.

#Removing outliers
"""

import seaborn as sns
sns_plot = sns.distplot(y)
fig = sns_plot.get_figure()

"""Here is the histogram of Delay. It's clear that the most of delay values are concentrated in the the interval from 0 to 100 minutes. In the future we will remove outliers using Isolation Forest."""

flight_delay_df["Year of departure"] = flight_delay_df["Year of departure"].astype(int)
flight_delay_df["Month of departure"] = flight_delay_df["Month of departure"].astype(int)
flight_delay_df["Day of departure"] = flight_delay_df["Day of departure"].astype(int)
flight_delay_df["Hour of departure"] = flight_delay_df["Hour of departure"].astype(int)
flight_delay_df["Minute of departure"] = flight_delay_df["Minute of departure"].astype(int)

flight_delay_df["Year of arrival"] = flight_delay_df["Year of arrival"].astype(int)
flight_delay_df["Month of arrival"] = flight_delay_df["Month of arrival"].astype(int)
flight_delay_df["Day of arrival"] = flight_delay_df["Day of arrival"].astype(int)
flight_delay_df["Hour of arrival"] = flight_delay_df["Hour of arrival"].astype(int)
flight_delay_df["Minute of arrival"] = flight_delay_df["Minute of arrival"].astype(int)

"""The features tuoes are changed from string to integer."""

X_train = flight_delay_df[(flight_delay_df["Year of departure"] < 2018)]
X_train = X_train.drop("Delay", axis = 1)
y_train = flight_delay_df[(flight_delay_df["Year of departure"] < 2018)]
y_train = y_train["Delay"]
X_test = flight_delay_df[(flight_delay_df["Year of departure"] == 2018)]
X_test = X_test.drop("Delay", axis = 1)
y_test = flight_delay_df[(flight_delay_df["Year of departure"] == 2018)]
y_test = y_test["Delay"]

"""Data is splitted into train and set. The train data is all the data from year 2015 till 2017. All the data samples collected in year 2018
are to be used as testing set
"""

from sklearn.ensemble import IsolationForest
y_train_array = np.asarray(y_train)
y_train_array = y_train_array.reshape(-1,1)
clf = IsolationForest(contamination = 0.05)
clf.fit(y_train_array)
preds = clf.predict(y_train_array)

y_outliers = list(preds)

new_df = flight_delay_df[(flight_delay_df["Year of departure"] < 2018)]
new_df["Indicator"] = y_outliers
new_df = new_df[new_df["Indicator"]!=-1]
X_train = new_df.drop("Delay",axis = 1)
X_train = X_train.drop("Indicator",axis = 1)
y_train = new_df["Delay"]

"""In this step we detected outliers and remove them from train set. """

import seaborn as sns
sns_plot = sns.distplot(y_train)
fig = sns_plot.get_figure()

"""We dropped all points which delay is greater than 50 minutes."""

plt.plot(X_train["Duration of flight"], y_train,'bo')
plt.title('Delay vs Duration of th flight')
plt.xlabel('Duration of th flight')
plt.ylabel('Delay')
plt.show()

regressor = LinearRegression()
regressor.fit(X_train, y_train)
print(f"Model intercept : {regressor.intercept_}")
print(f"Model coefficient : {regressor.coef_}")
print(X_train.shape)
print(X_test.shape)
y_pred = regressor.predict(X_test)
eval_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}) ### что это

"""#Models"""

print(y.mean())
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('Coefficient of determination R^2',metrics.r2_score(y_test, y_pred))
errors_list = [metrics.mean_absolute_error(y_test, y_pred),metrics.mean_squared_error(y_test, y_pred),np.sqrt(metrics.mean_squared_error(y_test, y_pred)),metrics.r2_score(y_test, y_pred)]
errors["Linear regresion"] = errors_list

"""We use Linear Regression for predictions. The error is big. And determination coefficient is small. In normal model it should be grater than 50%."""

from sklearn import linear_model
model = linear_model.Lasso()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print(y.mean())
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print('Coefficient of determination R^2',metrics.r2_score(y_test, y_pred))
errors_list = [metrics.mean_absolute_error(y_test, y_pred),metrics.mean_squared_error(y_test, y_pred),np.sqrt(metrics.mean_squared_error(y_test, y_pred)),metrics.r2_score(y_test, y_pred)]
errors["Linear regresion with Lasso"] = errors_list

X_test.shape
X_train_1D = X_train["Duration of flight"]
X_train_1D = np.array(X_train_1D)
X_train_1D = X_train_1D.reshape(-1,1)
X_test_1D = X_test["Duration of flight"]
X_test_1D = np.array(X_test_1D)
X_test_1D = X_test_1D.reshape(-1,1)

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures 
from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
degrees = [2,4,5]
for i in degrees:
  poly_features= PolynomialFeatures(degree=i)
  x_train_poly = poly_features.fit_transform(X_train_1D)
  poly_model = LinearRegression()
  poly_model.fit(x_train_poly, y_train)

  # predicting on training data-set
  y_train_predicted = poly_model.predict(x_train_poly)

  # predicting on test data-set
  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test_1D))

  # evaluating the model on training dataset
  print("Degree = ", i)
  print('Mean Absolute Error:', metrics.mean_absolute_error(y_train, y_train_predicted))
  print('Mean Squared Error:', metrics.mean_squared_error(y_train, y_train_predicted))
  print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, y_train_predicted)))
  print('Coefficient of determination R^2',metrics.r2_score(y_train, y_train_predicted))

  # evaluating the model on test dataset
  print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_test_predict))
  print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_test_predict))
  print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_test_predict)))
  print('Coefficient of determination R^2',metrics.r2_score(y_test, y_test_predict))
  errors_list = [metrics.mean_absolute_error(y_test, y_pred),metrics.mean_squared_error(y_test, y_pred),np.sqrt(metrics.mean_squared_error(y_test, y_pred)),metrics.r2_score(y_test, y_pred)]
  errors["Polynomial regresion"+str(i)] = errors_list

"""The same cocnlusion about Polynomial regression and Linear regresiion with Lasso regularization. Perhaps It's connected with abnormal points. In the traing set we exclude points with delays greater than 50, while in test we have points with delays greater than 1000. So this points give enourmous error.

#Detecting novelties
"""

preds_test = clf.predict(y_test.values.reshape(-1,1))

"""Now we try to detect novelties. And see what happen.

from sklearn.svm import SVR
lw = 2
X_train_1D = X_train["Duration of flight"]
X_train_1D = np.array(X_train_1D)
X_train_1D = X_train_1D.reshape(-1,1)
X_test_1D = X_test["Duration of flight"]
X_test_1D = np.array(X_test_1D)
X_test_1D = X_test_1D.reshape(-1,1)
svr = SVR(kernel='linear', C=100, gamma='auto')
plt.plot(X_train, svr.fit(X_train_1D, y_train).predict(X_train_1D), color='c', lw=lw,
                  label='{} model'.format('Linear'))
plt.show()
"""

new_df_test = flight_delay_df[(flight_delay_df["Year of departure"] == 2018)]
new_df_test["Index"] = preds_test
new_df_test = new_df_test[new_df_test["Index"]!=-1]
X_test_new = new_df_test.drop("Delay",axis = 1)
X_test_new = X_test_new.drop("Index",axis = 1)
y_test_new = new_df_test["Delay"]

y_pred = regressor.predict(X_test_new)
eval_df = pd.DataFrame({'Actual': y_test_new, 'Predicted': y_pred}) ### что это
print(y.mean())
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test_new, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test_new, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test_new, y_pred)))
print('Coefficient of determination R^2',metrics.r2_score(y_test_new, y_pred))

y_pred = model.predict(X_test_new)
eval_df = pd.DataFrame({'Actual': y_test_new, 'Predicted': y_pred}) ### что это
print(y.mean())
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test_new, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test_new, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test_new, y_pred)))
print('Coefficient of determination R^2',metrics.r2_score(y_test_new, y_pred))

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures 
from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
degrees = [2,4,5]
X_test_1D = X_test_new["Duration of flight"].values.reshape(-1,1)
for i in degrees:
  poly_features= PolynomialFeatures(degree=i)
  x_train_poly = poly_features.fit_transform(X_train_1D)
  poly_model = LinearRegression()
  poly_model.fit(x_train_poly, y_train)

  # predicting on training data-set
  y_train_predicted = poly_model.predict(x_train_poly)

  # predicting on test data-set
  y_test_predict = poly_model.predict(poly_features.fit_transform(X_test_1D))

  # evaluating the model on training dataset
  print("Degree = ", i)
  print('Mean Absolute Error:', metrics.mean_absolute_error(y_train, y_train_predicted))
  print('Mean Squared Error:', metrics.mean_squared_error(y_train, y_train_predicted))
  print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_train, y_train_predicted)))
  print('Coefficient of determination R^2',metrics.r2_score(y_train, y_train_predicted))

  # evaluating the model on test dataset
  print('Mean Absolute Error:', metrics.mean_absolute_error(y_test_new, y_test_predict))
  print('Mean Squared Error:', metrics.mean_squared_error(y_test_new, y_test_predict))
  print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test_new, y_test_predict)))
  print('Coefficient of determination R^2',metrics.r2_score(y_test_new, y_test_predict))

"""The error is decreased."""

